1.1
display 프로퍼티의 value 중 inline-block은 요소들을 옆으로 나란히 배치시키는 inline의 주요 특성과 width, height를 가질 수 있는 block의 주요 특성을 동시에 지닌다. 
그런데 inline-block의 문제점은 의도치 않게도 요소들 사이에 공백이 있다는 점과 특정 기기의 브라우저 사이즈에 맞게 디자인을 유연하게 맞출 수 없다는 점이 있다.
이 점을 보완한 display 의 value 가 flex(display: flex;). flexbox의 규칙은 배치를 원하는 요소들(children)의 parent 요소를 flexbox로 지정해야 한다는 것이다.
flexbox는 children과 이야기하지 않는다는 것을 잊어선 안 된다.

1.2
flex의 세계에는 두 가지가 있다.

1. row(행): 가로를 의미한다.
2. column(열): 세로를 의미한다.

flex container의 flex-direction 기본 값은 row다. 이때 해당 row에 있는 item의 위치를 변경시키기 위해서는 justify-content를 사용하는데 수평 축에 있는 flex children의 위치를 변경한다. (flex container에서는 부모가 자식의 위치를 변경한다는 것이 저번 수업의 핵심 내용이었다.)

이제 수평 축에 main-axis라는 멋드러진 이름을 붙여주자. 이 이름을 적용시켜 위 예시를 다시 생각해보면 다음과 같다.

flex-direction의 기본 값이 row일 때 수평축이 곧 main-axis다. 다시 말해 가로가 곧 main-axis인 것이다.
이때 main-axis에서 justify-content를 사용하면 item을 움직일 수 있는 것인데 main-axis가 수평축, 가로이기 때문에 가로로 item이 움직인다.

다른 axis로는 cross-axis가 존재한다. flex container가 row을 가질 때 cross-axis는 단어 그대로 가로지르기 때문에 수직(vertical)이다.
이때 cross-axis에서 item을 움직이기 위해서는 align-content를 사용한다. 수직, 세로로 움직이는 것이다.

이는 차후 direction을 배울 때 매우 중요하므로 main-axis와 cross-axis 용어 및 개념을 잊지 말자.

align-center를 사용할 때는 반드시 flex container(부모)의 높이가 어느 정도 되는지 반드시 확인하자. 이미 item과 높이가 동일하여 위치를 변환시킬 수 없는 경우가 많기 때문이다.

1.3 
flex direction 의 기본방향은 row (가로)
row방향일때 : main axis =가로(justify-content) / Cross axis=세로(align-items)
column방향일때 : main axis=세로(justify-content) / Cross axis=가로(align-items)

1.4
부모가 아닌 자식 아이템의 위치(position)를 직접 변경하고 싶을 때는 align-self와 order를 사용한다. 이때 *유의할 점은 부모의 높이(heigth)가 설정*되어 있어야 한다.

align-self는 align-item과 같이 동작한다. 다시 말해 cross axis 방향에 있는 item의 위치를 바꾸게 된다.

order의 경우 단어 그대로 순서를 바꾼다. 이때 기본 값(default)는 0이라 order를 1로 줄 경우 order를 주지 않은 것보다 뒤에 위치하게 된다. HTML을 통해 순서를 바꾸기 힘들 때 사용하면 좋다.

1.5 wrap, nowrap, reverse, align-content
- father, child 모두 flex로 해주면 child에 있던 글자가 중앙에 위치하게 됨

1) flex-wrap
- flexbox는 width보다도, '같은 줄'에 있도록 하는 것을 우선시함
-> flex-wrap: wrap; (child의 사이즈를 유지하라고 하는 것)
-> nowrap; (child를 모두 같은 줄에 정렬함, 이때 width가 줄어들 수 있음)

2) reverse
- flex-direction: row-reverse; (오른쪽에서부터 1이 시작)
- column-reverse;
- flex-wrap: wrap-reverse; (한 줄이 되지 않아도 아래에서 위로 정렬되게)

* wrap으로 정렬 시 (여러 줄으로, 각 item의 width를 유지하면서)
각 줄(기본: row) 간의 간격이 생기는데, 이것을 'align-content'라는 property로 조절 가능

3) align-content (line을 변경, line은 cross-axis에 있는 상태)
- justify-content와 비슷하지만 'line'에 관한 것 (각 block이 여러 행에 걸쳐 나올 때, 행간 공백을 얼마나 둘 건지?)
- align-content: flex-start; - align-content: space-around;

1.6  flex-grow, flex-shrink
1) flex-shrink: flexbox가 쥐어짤 때, element의 행동의 정의함
ex) flex-wrap: nowrap일때, 화면이 작아지면 width가 설정되어있어도 줄어들지.
- flex-shrink: 1; - flex-shrink: n(정수); --> 여러 개 element 중 특정 element만 덜 줄어들거나, 더 줄어들게 할 수 있음!!

2) flex-grow: shrink와 반대, 화면이 늘어남에 따라 box 크기가 얼마나 늘어날까?
- flex-grow: 1; - flex-grow: 0; - 남아있는 공간을 가져옴 (space를 없애고)
-> 즉, 남아있는 공간, 여백이 있을 때만 grow 가능
=> 화면이 커질 때, element도 함께 커지길 원할 때 사용할 수 있음
=> flex-grow property가 0인 상태거나, 따로 정의되지 않았다면, 화면이 커져도 각 element 크기가 커지지 않음
(여백만 늘어나게 됨)

1.7flex-basis
flex-basis

shrink, grow 되기전에 element에게 초기 size를 주는 것.
but 자주 사용 X basis 정의 안할시 width와 같은 값이니까.

2.4 Rows and Columns
[grid-template-areas와 비슷한 기능을 하는 속성, 자식 grid에 명시한다.]
1)grid-column-start
2)grid-column-end
3)grid-row-start
4)grid-row-end
해당 속성은 정수인 숫자가 들어가며, 1부터 column(row)의 최대갯수 + 1까지 사용 가능하다.
범위를 초과하게 되면 css가 망가져서 생각한 대로 동작하지 않게 되니 꼭 명심하자.. 참고로 상대단위(%, auto)등은 안 먹히는 듯 하다.

2.5 shortcuts
이렇게 start, end를 하나하나 다 명시해서 쓰는건 귀찮기도 하기 때문에 다음 강의에 이를 해결하기위한 방법인 shortCuts이 나온다.
● grid-column: (start) / (end);
● grid-row: (start) / (end);

● -1, -2, -3, ··· ▷ 끝에서부터 line 세기
● (start) / span (cell 수) ▷ 시작점과 끝점을 적는걸 대신한다.

2.7 Grid Template
fr-fraction(부분)
fraction은 grid에서 사용 가능한 공간을 뜻한다.
fr값 비율로 공간을 나눈다.

● grid-template:
"(이름)" (row크기)
"(이름)" (row크기)
"(이름)" (row크기)/ (각 column의 크기);

2.8 Place Items
● justify-items
● align-items
● place-items: (수직) (수평);

▷ stretch : grid를 늘려서 grid를 채우게 한다.
▷ start : item을 cell 시작에 배치한다.
▷ center : item을 cell 중앙에 배치한다.
▷ end : item을 cell 끝에 배치한다.

2.9[place content]
- Justify-content : start; (그리드가 놓이는 위치를 뜻하며 기본은 start)
- Align-content는 수직적으로 그리드를 움직이는 것
- Start, end, space-evenly, space-around, space-between 사용
- 컨테이너의 height가 그리드를 담을 만큼 충분해야한다.(높이 지정)
- Grid-template에서 높이를 fr로 설정하고 align-content를 stretch로 설정하면 쭉 늘어난다.
- Place items와 마찬가지로 place-content를 통해 수직 수평으로 그리드 이동가능(첫번째가 수직, 두번째 옵션이 수평)
- Place-items는 셀안에서 항목이 이동하는 것이며, place-content는 그리드가 이동하는 것이다.